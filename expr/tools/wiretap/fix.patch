diff --git a/src/edu/ucla/pls/wiretap/Agent.java b/src/edu/ucla/pls/wiretap/Agent.java
index ee3b0f9..513bdee 100644
--- a/src/edu/ucla/pls/wiretap/Agent.java
+++ b/src/edu/ucla/pls/wiretap/Agent.java
@@ -98,8 +98,6 @@ public class Agent implements ClassFileTransformer, Closeable {
       System.exit(-1);
     }
 
-    new DeadlockDetector(recorder, properties, 1000).start();
-
     final Thread mainThread = Thread.currentThread();
     Runtime.getRuntime().addShutdownHook(new Thread() {
         public void run() {
diff --git a/src/edu/ucla/pls/wiretap/DeadlockDetector.java b/src/edu/ucla/pls/wiretap/DeadlockDetector.java
index ba23d04..934d184 100644
--- a/src/edu/ucla/pls/wiretap/DeadlockDetector.java
+++ b/src/edu/ucla/pls/wiretap/DeadlockDetector.java
@@ -1,81 +1,62 @@
 package edu.ucla.pls.wiretap;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.PrintStream;
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadInfo;
 import java.lang.management.ThreadMXBean;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.Map;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.TimeUnit;
 
 // Implementation borrowed from http://korhner.github.io/java/multithreading/detect-java-deadlocks-programmatically/
 public class DeadlockDetector implements Runnable {
 
   private final long interval;
-  private final WiretapProperties properties;
-  private final Class<?> recorder;
-
   private final ThreadMXBean mbean = ManagementFactory.getThreadMXBean();
-  private final ScheduledExecutorService scheduler =
-    Executors.newSingleThreadScheduledExecutor(new ThreadFactory () {
-        public Thread newThread(Runnable r) {
-          Thread t = new Thread (r);
-          t.setDaemon(true);
-          return t;
-        }
-      });
+  private final Handler handler;
 
-  public DeadlockDetector (Class<?> recorder, WiretapProperties properties,long interval) {
+  public DeadlockDetector (Handler handler, long interval) {
     this.interval = interval;
-    this.properties = properties;
-    this.recorder = recorder;
+    this.handler = handler;
   }
 
   public void start () {
-    scheduler.scheduleAtFixedRate(this, interval, interval, TimeUnit.MILLISECONDS);
+    Thread t = new Thread(this);
+    t.setDaemon(true);
+    //scheduler.scheduleAtFixedRate(this, interval, interval, TimeUnit.MILLISECONDS);
+    t.start();
+    System.err.println("Deadlock detector started!");
   }
 
   public void run () {
+    while (true) {
+      try {
+        Thread.sleep(interval);
+        checkForDeadlock();
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+    }
+  }
+
+  public void checkForDeadlock () {
+    System.err.println("Checking for deadlocks");
     long [] threadIds = mbean.findMonitorDeadlockedThreads();
     if (threadIds != null) {
       System.err.println("Deadlock detected");
-      File deadlockFile = new File(properties.getOutFolder(), "deadlock-threads.txt");
-      PrintStream ps;
-      try {
-        Method m = recorder.getDeclaredMethod("getLogger", Thread.class);
-        ps = new PrintStream(deadlockFile);
-        ThreadInfo [] threadInfos = mbean.getThreadInfo(threadIds);
-        Map<Thread, StackTraceElement[]> stackTraceMap = Thread.getAllStackTraces();
-        for (ThreadInfo threadInfo: threadInfos) {
-          for (Thread thread : stackTraceMap.keySet()) {
-            if (thread.getId() == threadInfo.getThreadId()) {
-              ps.println(m.invoke(null, thread));
-            }
-          }
+      ThreadInfo [] threadInfos = mbean.getThreadInfo(threadIds);
+      Map<Thread, StackTraceElement[]> stackTraceMap = Thread.getAllStackTraces();
+      Thread [] threads = new Thread [threadInfos.length];
+      for (int ii = 0; ii < threadInfos.length; ++ii) {
+        long tid = threadInfos[ii].getThreadId();
+        for (Thread thread : stackTraceMap.keySet()) {
+          if (thread.getId() == tid)
+            threads[ii] = thread;
         }
-        ps.println();
-        ps.close();
-      } catch (FileNotFoundException e) {
-        System.err.print("Could not find file: ");
-        System.err.println(deadlockFile);
-      } catch (IllegalAccessException e) {
-        e.printStackTrace();
-        System.err.println("Could not find potential logger.");
-      } catch (InvocationTargetException e) {
-        e.printStackTrace();
-        System.err.println("Could not find potential logger.");
-      } catch (NoSuchMethodException e) {
-        e.printStackTrace();
-        System.err.println("Could not use the potential logger");
       }
-      System.exit(1);
+      handler.handleDeadlock(threads);
     }
   }
 
+  public static interface Handler {
+    void handleDeadlock(Thread [] threads);
+  }
+
 }
diff --git a/src/edu/ucla/pls/wiretap/recorders/BinaryHistoryLogger.java b/src/edu/ucla/pls/wiretap/recorders/BinaryHistoryLogger.java
index 51c014f..aa97f2e 100644
--- a/src/edu/ucla/pls/wiretap/recorders/BinaryHistoryLogger.java
+++ b/src/edu/ucla/pls/wiretap/recorders/BinaryHistoryLogger.java
@@ -2,9 +2,11 @@ package edu.ucla.pls.wiretap.recorders;
 
 import java.io.BufferedOutputStream;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.io.PrintStream;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -13,8 +15,9 @@ import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
 import edu.ucla.pls.wiretap.Closer;
-import edu.ucla.pls.wiretap.utils.ConcurrentOutputStream;
+import edu.ucla.pls.wiretap.DeadlockDetector;
 import edu.ucla.pls.wiretap.WiretapProperties;
+import edu.ucla.pls.wiretap.utils.ConcurrentOutputStream;
 
 /** The logger logs events to file.
  */
@@ -30,8 +33,26 @@ public class BinaryHistoryLogger extends BinaryLogger {
   private static AtomicLong counter;
   private static final AtomicInteger loggerId = new AtomicInteger();
 
-  public static void setupRecorder(WiretapProperties properties) {
+  public static void setupRecorder(final WiretapProperties properties) {
     File historyFile = properties.getHistoryFile();
+    new DeadlockDetector(new DeadlockDetector.Handler () {
+        public void handleDeadlock(Thread [] threads) {
+          File file = new File(properties.getOutFolder(), "deadlocks.txt");
+          try {
+            PrintStream out = new PrintStream(file);
+            for (Thread t: threads) {
+              BinaryHistoryLogger hl = getBinaryHistoryLogger(t);
+              out.print(hl.getId());
+              out.print(" ");
+              out.println(hl.getLastInstruction());
+            }
+            out.close();
+          } catch (FileNotFoundException e) {
+            e.printStackTrace();
+          }
+          System.exit(1);
+        }
+      }, 1000).start();
     instFolder = properties.getInstFolder();
     long loggingDepth = properties.getLoggingDepth();
     if (loggingDepth > 0) {
@@ -132,7 +153,6 @@ public class BinaryHistoryLogger extends BinaryLogger {
 
   @Override
   public void close() throws IOException {
-    end();
     super.close();
   }
 
diff --git a/src/edu/ucla/pls/wiretap/recorders/BinaryLogger.java b/src/edu/ucla/pls/wiretap/recorders/BinaryLogger.java
index 4d692d3..8da0be9 100644
--- a/src/edu/ucla/pls/wiretap/recorders/BinaryLogger.java
+++ b/src/edu/ucla/pls/wiretap/recorders/BinaryLogger.java
@@ -54,18 +54,25 @@ public abstract class BinaryLogger implements Closeable {
     return "Logger_" + this.id;
   }
 
+  private volatile int lastInstruction;
   private final void logInstruction(int inst) {
     if (logInst != null) {
       try {
         byte[] bytes = new byte[4];
         writeInt(inst, bytes, 0);
         logInst.write(bytes);
+        lastInstruction = inst;
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
     }
   }
 
+  public int getLastInstruction() {
+    return lastInstruction;
+  }
+
+
   public final void write(int value) {
     byte[] _event = this.event;
     int _offset = this.offset;
